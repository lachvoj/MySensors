#include <cstdint>
#include <cstdio>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#ifndef __linux__
#define __linux__
#endif

// mcp_can_dfs
#define MCP_STDEXT 0
#define CAN_OK (0)
#define CAN_FAILINIT (1)
#define CAN_FAILTX (2)
#define CAN_MSGAVAIL (3)
#define CAN_NOMSG (4)
#define CAN_CTRLERROR (5)
#define CAN_GETTXBFTIMEOUT (6)
#define CAN_SENDMSGTIMEOUT (7)
#define CAN_FAIL (0xff)
#define CAN_250KBPS 12
#define CAN_MAX_CHAR_IN_MESSAGE (8)

// MySensorsCore
#define BROADCAST_ADDRESS ((uint8_t)255)

// MyConfig
#define MY_CAN_LINUX_CANDEV
#define MY_CAN_LINUX_CANDEV_DEVICE_STR_VALUE(arg) #arg
#define MY_CAN_LINUX_CANDEV_DEVICE MY_CAN_LINUX_CANDEV_DEVICE_STR_VALUE(can0)
#define MCP_8MHZ 2
#define MY_CAN_CLOCK MCP_8MHZ
#define MY_CAN_SPEED CAN_250KBPS
#define MY_CAN_BUF_SIZE (64u)
#define MY_CAN_SLOT_MAX_AGE_MS 10000

// MyMessage
#define V2_MYS_HEADER_MAX_MESSAGE_SIZE (32u)
#define MAX_MESSAGE_SIZE V2_MYS_HEADER_MAX_MESSAGE_SIZE

// MyTransportHAL
#define INVALID_SNR ((int16_t)-256)  //!< INVALID_SNR
#define INVALID_RSSI ((int16_t)-256) //!< INVALID_RSSI

// mockups

#include "mockups/Arduino.cpp"
#include "./MyTransportCAN.cpp"

typedef struct test
{
    uint8_t id;
    uint8_t length;
    uint8_t data[MAX_MESSAGE_SIZE];
} MY_msg_t;


int getRandomInRange(int lower, int upper)
{
    return  ((rand() %  (upper - lower + 1)) + lower);
}

void getRandomMsg(MY_msg_t *myMsg)
{
    myMsg->id = 0;
    myMsg->length = getRandomInRange(7, 32);
    for (size_t i = 0; i < myMsg->length; i++)
    {
        myMsg->data[i] = getRandomInRange(0, 255);
    }
    
}

int getMicrosDiff(const timeval *first, const timeval *second)
{
    int firstMicros = first->tv_sec * 1000000 + first->tv_usec;
    int secondMicros = second->tv_sec * 1000000 + second->tv_usec;

    return (secondMicros - firstMicros);
}

#ifndef CAN_NUM_OF_RANDOM_MSG1
#define CAN_NUM_OF_RANDOM_MSG1 200
#endif

#ifndef CAN_NUM_OF_TEST_RUN
#define CAN_NUM_OF_TEST_RUN 100000
#endif

/* mocked candev variables
static can_frame canMsgBuf[TEST_MSG_BUF_SZ];
static uint32_t canMsgBufWrPt;
static uint32_t canMsgBufRdPt;
*/

int main()
{
    srand(time(0));
    CAN_transportInit();

    // // generate random messages
    // for (size_t i = 0; i < CAN_NUM_OF_RANDOM_MSG1; i++)
    // {
    //     MY_msg_t msg;
    //     getRandomMsg(&msg);
    //     CAN_transportSend(0, (void *)msg.data, msg.length, false);
    // }

    // //print generated messages
    // printf("can_frame  temp[] = {");
    // for (size_t i = 0; i < CAN_NUM_OF_RANDOM_MSG1; i++)
    // {
    //     printf("{%d,%d,0,0,0,{", canMsgBuf[i].can_id, canMsgBuf[i].can_dlc);
    //     for (size_t j = 0; j < CAN_MAX_DLEN; j++)
    //     {
    //         printf("%d", canMsgBuf[i].data[j]);
    //         if (j < (size_t)(CAN_MAX_DLEN - 1))
    //             printf(",");
    //     }
    //     printf("}}");
    //     if (i < (CAN_NUM_OF_RANDOM_MSG1 - 1))
    //         printf(",");
    // }
    // printf("};\n\n");

    printf("Sizeof CAN_Slot_t: %ldB\n\n", sizeof(CAN_Slot_t));
    //CAN_Slot_structure:
    CAN_Slot_t testSlot;
    memset(&testSlot, 0, sizeof(CAN_Slot_t));
    testSlot.data[0] = 0x01U;
    testSlot.data[MAX_MESSAGE_SIZE - 1] = 0x80U;
    testSlot.timestamp = 0x80000001U;
    testSlot.searchId = 0x80000001U;
#ifdef MY_CAN_FAST_SLOT_ACCESS
    testSlot.next = (CAN_Slot *)0x80000001U;
    testSlot.prev = (CAN_Slot *)0x80000001U;
#else
    testSlot.ready = true;
#endif
    testSlot.totalFrames = 0x81U;
    testSlot.len = 0x81U;

    const size_t canSlotSz = sizeof(CAN_Slot_t);
    uint8_t *bytePt = (uint8_t *)&testSlot;
    printf("Bytes of testSlot:\n");
    for (size_t i = 0; i < canSlotSz; i++)
    {
        printf("i:%ld,d:0x%0X\n", i, *(bytePt + i));
    }

    timeval startTime, endTime;
    int timeSpentByAllRuns = 0;
    can_frame temp[] = {
        {16, 8, 0, 0, 0, {247, 228, 188, 43, 46, 215, 174, 113}},
        {18, 8, 0, 0, 0, {248, 167, 137, 39, 13, 54, 189, 87}},
        {20, 8, 0, 0, 0, {130, 123, 6, 60, 120, 232, 186, 171}},
        {23, 5, 0, 0, 0, {237, 220, 40, 111, 250, 0, 0, 0}},
        {32, 8, 0, 0, 0, {53, 241, 252, 241, 28, 42, 200, 202}},
        {34, 8, 0, 0, 0, {155, 192, 113, 37, 231, 126, 91, 165}},
        {36, 8, 0, 0, 0, {213, 221, 32, 219, 26, 152, 196, 212}},
        {39, 1, 0, 0, 0, {67, 0, 0, 0, 0, 0, 0, 0}},
        {48, 8, 0, 0, 0, {176, 108, 32, 170, 132, 85, 155, 128}},
        {50, 8, 0, 0, 0, {70, 183, 171, 14, 129, 70, 206, 242}},
        {53, 2, 0, 0, 0, {107, 182, 0, 0, 0, 0, 0, 0}},
        {64, 8, 0, 0, 0, {199, 91, 70, 164, 123, 34, 190, 19}},
        {66, 8, 0, 0, 0, {230, 146, 87, 151, 67, 195, 184, 237}},
        {69, 8, 0, 0, 0, {71, 13, 137, 199, 84, 64, 114, 98}},
        {80, 8, 0, 0, 0, {185, 49, 180, 36, 231, 37, 235, 66}},
        {82, 8, 0, 0, 0, {108, 144, 189, 142, 78, 208, 116, 225}},
        {84, 8, 0, 0, 0, {39, 11, 36, 234, 195, 17, 49, 209}},
        {87, 7, 0, 0, 0, {154, 249, 37, 219, 107, 135, 157, 0}},
        {96, 8, 0, 0, 0, {184, 81, 73, 159, 119, 52, 225, 227}},
        {98, 8, 0, 0, 0, {196, 158, 113, 19, 111, 229, 244, 150}},
        {100, 8, 0, 0, 0, {240, 24, 129, 180, 41, 178, 133, 196}},
        {103, 7, 0, 0, 0, {171, 170, 159, 23, 49, 60, 59, 0}},
        {112, 8, 0, 0, 0, {141, 132, 137, 4, 185, 107, 231, 125}},
        {115, 1, 0, 0, 0, {9, 0, 0, 0, 0, 0, 0, 0}},
        {129, 7, 0, 0, 0, {144, 120, 61, 132, 15, 46, 156, 0}},
        {144, 8, 0, 0, 0, {226, 198, 66, 103, 138, 238, 17, 41}},
        {147, 1, 0, 0, 0, {5, 0, 0, 0, 0, 0, 0, 0}},
        {160, 8, 0, 0, 0, {101, 64, 44, 242, 197, 182, 247, 126}},
        {163, 3, 0, 0, 0, {33, 222, 251, 0, 0, 0, 0, 0}},
        {176, 8, 0, 0, 0, {55, 140, 163, 116, 16, 178, 162, 173}},
        {179, 7, 0, 0, 0, {66, 132, 115, 132, 235, 253, 114, 0}},
        {192, 8, 0, 0, 0, {38, 119, 63, 139, 184, 107, 125, 125}},
        {194, 8, 0, 0, 0, {33, 116, 251, 66, 83, 246, 109, 138}},
        {196, 8, 0, 0, 0, {130, 16, 254, 147, 194, 161, 64, 4}},
        {199, 7, 0, 0, 0, {37, 179, 136, 17, 176, 251, 13, 0}},
        {208, 8, 0, 0, 0, {114, 76, 97, 42, 184, 222, 167, 217}},
        {210, 8, 0, 0, 0, {83, 162, 28, 166, 153, 137, 48, 27}},
        {213, 1, 0, 0, 0, {153, 0, 0, 0, 0, 0, 0, 0}},
        {224, 8, 0, 0, 0, {174, 91, 207, 238, 95, 245, 161, 231}},
        {227, 1, 0, 0, 0, {6, 0, 0, 0, 0, 0, 0, 0}},
        {240, 8, 0, 0, 0, {226, 19, 39, 85, 96, 136, 127, 24}},
        {243, 6, 0, 0, 0, {103, 39, 241, 186, 201, 13, 0, 0}},
        {256, 8, 0, 0, 0, {98, 150, 144, 126, 47, 190, 44, 138}},
        {258, 8, 0, 0, 0, {142, 27, 233, 131, 188, 209, 137, 14}},
        {260, 8, 0, 0, 0, {179, 156, 53, 8, 252, 190, 136, 20}},
        {263, 5, 0, 0, 0, {37, 175, 6, 223, 120, 0, 0, 0}},
        {272, 8, 0, 0, 0, {63, 219, 170, 207, 89, 217, 141, 133}},
        {274, 8, 0, 0, 0, {100, 27, 160, 77, 158, 93, 30, 39}},
        {277, 8, 0, 0, 0, {107, 210, 196, 160, 218, 192, 94, 98}},
        {289, 8, 0, 0, 0, {131, 17, 219, 98, 138, 238, 161, 101}},
        {304, 8, 0, 0, 0, {112, 190, 114, 254, 67, 214, 25, 228}},
        {306, 8, 0, 0, 0, {35, 184, 65, 66, 223, 172, 20, 163}},
        {308, 8, 0, 0, 0, {76, 238, 100, 171, 81, 57, 46, 98}},
        {311, 5, 0, 0, 0, {20, 145, 236, 2, 50, 0, 0, 0}},
        {320, 8, 0, 0, 0, {155, 163, 15, 13, 161, 83, 227, 186}},
        {323, 4, 0, 0, 0, {55, 6, 114, 120, 0, 0, 0, 0}},
        {336, 8, 0, 0, 0, {82, 36, 92, 245, 112, 75, 89, 27}},
        {338, 8, 0, 0, 0, {156, 146, 74, 254, 166, 219, 235, 169}},
        {341, 3, 0, 0, 0, {13, 60, 68, 0, 0, 0, 0, 0}},
        {352, 8, 0, 0, 0, {76, 81, 81, 159, 52, 12, 214, 58}},
        {355, 3, 0, 0, 0, {126, 78, 131, 0, 0, 0, 0, 0}},
        {368, 8, 0, 0, 0, {114, 223, 198, 226, 42, 31, 254, 198}},
        {370, 8, 0, 0, 0, {178, 72, 197, 88, 35, 176, 1, 48}},
        {373, 3, 0, 0, 0, {236, 69, 225, 0, 0, 0, 0, 0}},
        {384, 8, 0, 0, 0, {150, 50, 215, 202, 62, 173, 5, 189}},
        {386, 8, 0, 0, 0, {251, 136, 141, 109, 103, 83, 80, 146}},
        {389, 7, 0, 0, 0, {115, 78, 88, 37, 150, 29, 125, 0}},
        {400, 8, 0, 0, 0, {205, 127, 233, 186, 196, 202, 242, 91}},
        {402, 8, 0, 0, 0, {253, 202, 37, 59, 119, 42, 248, 115}},
        {404, 8, 0, 0, 0, {178, 134, 224, 26, 217, 48, 172, 76}},
        {407, 8, 0, 0, 0, {126, 4, 113, 20, 34, 239, 205, 239}},
        {416, 8, 0, 0, 0, {183, 169, 50, 129, 156, 141, 126, 102}},
        {419, 3, 0, 0, 0, {179, 186, 221, 0, 0, 0, 0, 0}},
        {432, 8, 0, 0, 0, {178, 80, 144, 56, 49, 170, 18, 97}},
        {435, 4, 0, 0, 0, {86, 94, 224, 90, 0, 0, 0, 0}},
        {449, 7, 0, 0, 0, {244, 124, 191, 194, 108, 45, 121, 0}},
        {464, 8, 0, 0, 0, {95, 250, 177, 237, 121, 23, 160, 51}},
        {466, 8, 0, 0, 0, {245, 125, 229, 69, 13, 30, 118, 183}},
        {469, 8, 0, 0, 0, {48, 216, 13, 142, 184, 104, 94, 172}},
        {480, 8, 0, 0, 0, {29, 110, 80, 74, 231, 102, 170, 226}},
        {482, 8, 0, 0, 0, {23, 151, 91, 47, 55, 142, 36, 180}},
        {485, 7, 0, 0, 0, {115, 105, 194, 145, 224, 121, 193, 0}},
        {496, 8, 0, 0, 0, {135, 80, 112, 239, 174, 28, 211, 204}},
        {498, 8, 0, 0, 0, {139, 36, 22, 114, 138, 192, 84, 161}},
        {501, 3, 0, 0, 0, {87, 175, 208, 0, 0, 0, 0, 0}},
        {512, 8, 0, 0, 0, {61, 244, 67, 177, 94, 5, 66, 62}},
        {514, 8, 0, 0, 0, {126, 4, 246, 5, 84, 102, 244, 2}},
        {516, 8, 0, 0, 0, {130, 200, 206, 13, 236, 229, 128, 118}},
        {519, 5, 0, 0, 0, {165, 212, 23, 253, 132, 0, 0, 0}},
        {528, 8, 0, 0, 0, {139, 193, 220, 206, 114, 58, 211, 181}},
        {530, 8, 0, 0, 0, {120, 82, 185, 110, 87, 13, 212, 76}},
        {532, 8, 0, 0, 0, {15, 87, 20, 222, 100, 0, 195, 228}},
        {535, 3, 0, 0, 0, {118, 104, 185, 0, 0, 0, 0, 0}},
        {544, 8, 0, 0, 0, {101, 61, 117, 241, 254, 82, 191, 113}},
        {547, 2, 0, 0, 0, {140, 147, 0, 0, 0, 0, 0, 0}},
        {560, 8, 0, 0, 0, {5, 229, 223, 115, 60, 236, 72, 136}},
        {562, 8, 0, 0, 0, {251, 159, 156, 217, 3, 156, 156, 232}},
        {564, 8, 0, 0, 0, {18, 5, 161, 160, 106, 222, 21, 91}},
        {567, 3, 0, 0, 0, {220, 103, 27, 0, 0, 0, 0, 0}},
        {576, 8, 0, 0, 0, {244, 174, 115, 249, 147, 82, 108, 207}},
        {578, 8, 0, 0, 0, {62, 180, 88, 58, 83, 244, 19, 87}},
        {581, 4, 0, 0, 0, {145, 176, 63, 163, 0, 0, 0, 0}},
        {592, 8, 0, 0, 0, {224, 67, 31, 190, 89, 123, 154, 192}},
        {594, 8, 0, 0, 0, {150, 232, 180, 68, 91, 173, 215, 174}},
        {596, 8, 0, 0, 0, {26, 166, 236, 206, 254, 38, 34, 243}},
        {599, 2, 0, 0, 0, {58, 121, 0, 0, 0, 0, 0, 0}},
        {608, 8, 0, 0, 0, {234, 184, 39, 159, 152, 107, 190, 86}},
        {611, 7, 0, 0, 0, {196, 57, 240, 132, 207, 216, 57, 0}},
        {624, 8, 0, 0, 0, {52, 230, 234, 226, 0, 145, 206, 207}},
        {627, 4, 0, 0, 0, {143, 245, 241, 130, 0, 0, 0, 0}},
        {640, 8, 0, 0, 0, {106, 6, 25, 34, 46, 184, 186, 153}},
        {643, 8, 0, 0, 0, {118, 16, 93, 176, 0, 225, 127, 217}},
        {656, 8, 0, 0, 0, {147, 13, 1, 125, 239, 1, 14, 189}},
        {658, 8, 0, 0, 0, {208, 158, 178, 193, 32, 225, 43, 39}},
        {660, 8, 0, 0, 0, {250, 77, 85, 178, 7, 238, 41, 23}},
        {663, 7, 0, 0, 0, {75, 217, 24, 44, 88, 241, 71, 0}},
        {672, 8, 0, 0, 0, {254, 72, 105, 237, 73, 119, 170, 26}},
        {675, 8, 0, 0, 0, {21, 93, 219, 54, 62, 7, 93, 57}},
        {688, 8, 0, 0, 0, {178, 235, 92, 160, 20, 115, 235, 237}},
        {690, 8, 0, 0, 0, {139, 23, 70, 124, 94, 49, 122, 166}},
        {693, 3, 0, 0, 0, {154, 103, 240, 0, 0, 0, 0, 0}},
        {704, 8, 0, 0, 0, {18, 10, 39, 111, 229, 93, 173, 236}},
        {706, 8, 0, 0, 0, {186, 230, 65, 108, 210, 157, 12, 230}},
        {708, 8, 0, 0, 0, {16, 247, 212, 156, 15, 26, 24, 109}},
        {711, 7, 0, 0, 0, {75, 147, 20, 230, 250, 4, 248, 0}},
        {720, 8, 0, 0, 0, {14, 31, 123, 243, 125, 41, 224, 55}},
        {722, 8, 0, 0, 0, {15, 33, 164, 225, 190, 176, 200, 206}},
        {725, 3, 0, 0, 0, {168, 156, 106, 0, 0, 0, 0, 0}},
        {736, 8, 0, 0, 0, {182, 131, 36, 1, 22, 56, 231, 16}},
        {739, 8, 0, 0, 0, {60, 223, 29, 74, 255, 152, 62, 124}},
        {752, 8, 0, 0, 0, {30, 179, 209, 63, 87, 178, 253, 8}},
        {754, 8, 0, 0, 0, {122, 203, 176, 22, 54, 103, 204, 185}},
        {757, 6, 0, 0, 0, {139, 206, 207, 196, 181, 223, 0, 0}},
        {768, 8, 0, 0, 0, {149, 252, 75, 148, 149, 137, 16, 86}},
        {770, 8, 0, 0, 0, {167, 195, 39, 230, 27, 218, 227, 35}},
        {772, 8, 0, 0, 0, {84, 174, 211, 107, 228, 58, 55, 157}},
        {775, 7, 0, 0, 0, {197, 5, 108, 137, 187, 76, 138, 0}},
        {784, 8, 0, 0, 0, {72, 213, 228, 221, 94, 244, 52, 5}},
        {786, 8, 0, 0, 0, {183, 91, 235, 210, 53, 206, 245, 138}},
        {788, 8, 0, 0, 0, {124, 200, 245, 97, 2, 44, 254, 200}},
        {791, 5, 0, 0, 0, {50, 107, 81, 237, 183, 0, 0, 0}},
        {801, 8, 0, 0, 0, {61, 255, 176, 33, 221, 14, 21, 17}},
        {816, 8, 0, 0, 0, {204, 108, 254, 159, 162, 204, 148, 44}},
        {818, 8, 0, 0, 0, {73, 93, 33, 170, 95, 77, 168, 39}},
        {821, 8, 0, 0, 0, {127, 19, 121, 108, 202, 84, 169, 202}},
        {833, 8, 0, 0, 0, {202, 167, 19, 223, 184, 39, 172, 36}},
        {848, 8, 0, 0, 0, {75, 198, 242, 223, 242, 59, 60, 19}},
        {850, 8, 0, 0, 0, {229, 156, 97, 141, 195, 224, 161, 60}},
        {853, 6, 0, 0, 0, {77, 107, 145, 246, 53, 150, 0, 0}},
        {864, 8, 0, 0, 0, {220, 169, 160, 148, 208, 76, 185, 246}},
        {867, 6, 0, 0, 0, {151, 127, 232, 119, 114, 35, 0, 0}},
        {880, 8, 0, 0, 0, {133, 8, 79, 230, 149, 19, 199, 54}},
        {883, 2, 0, 0, 0, {79, 20, 0, 0, 0, 0, 0, 0}},
        {896, 8, 0, 0, 0, {224, 10, 215, 118, 203, 180, 32, 108}},
        {899, 5, 0, 0, 0, {72, 240, 184, 1, 230, 0, 0, 0}},
        {912, 8, 0, 0, 0, {129, 206, 199, 243, 241, 122, 120, 249}},
        {915, 3, 0, 0, 0, {202, 95, 143, 0, 0, 0, 0, 0}},
        {929, 8, 0, 0, 0, {38, 197, 44, 58, 103, 13, 68, 63}},
        {944, 8, 0, 0, 0, {16, 243, 163, 124, 59, 148, 52, 61}},
        {947, 2, 0, 0, 0, {122, 132, 0, 0, 0, 0, 0, 0}},
        {960, 8, 0, 0, 0, {73, 75, 177, 58, 198, 41, 52, 144}},
        {963, 3, 0, 0, 0, {136, 195, 109, 0, 0, 0, 0, 0}},
        {976, 8, 0, 0, 0, {136, 153, 232, 240, 166, 45, 47, 42}},
        {978, 8, 0, 0, 0, {61, 34, 205, 185, 93, 97, 237, 154}},
        {981, 1, 0, 0, 0, {220, 0, 0, 0, 0, 0, 0, 0}},
        {992, 8, 0, 0, 0, {88, 37, 189, 9, 95, 131, 51, 147}},
        {995, 5, 0, 0, 0, {19, 187, 86, 128, 106, 0, 0, 0}},
        {1008, 8, 0, 0, 0, {26, 82, 207, 192, 127, 254, 234, 188}},
        {1010, 8, 0, 0, 0, {32, 184, 117, 125, 25, 99, 24, 245}},
        {1013, 6, 0, 0, 0, {213, 112, 26, 146, 122, 122, 0, 0}},
        {1024, 8, 0, 0, 0, {173, 13, 41, 104, 100, 170, 210, 67}},
        {1026, 8, 0, 0, 0, {196, 37, 18, 132, 164, 16, 111, 97}},
        {1029, 7, 0, 0, 0, {48, 39, 214, 173, 64, 57, 197, 0}},
        {1040, 8, 0, 0, 0, {14, 54, 80, 161, 176, 202, 183, 93}},
        {1042, 8, 0, 0, 0, {216, 224, 197, 60, 138, 152, 127, 78}},
        {1045, 3, 0, 0, 0, {189, 145, 211, 0, 0, 0, 0, 0}},
        {1056, 8, 0, 0, 0, {161, 66, 194, 209, 105, 153, 126, 169}},
        {1058, 8, 0, 0, 0, {210, 68, 223, 225, 122, 48, 130, 42}},
        {1061, 6, 0, 0, 0, {250, 57, 135, 210, 25, 76, 0, 0}},
        {1072, 8, 0, 0, 0, {164, 228, 141, 242, 161, 30, 197, 3}},
        {1075, 1, 0, 0, 0, {191, 0, 0, 0, 0, 0, 0, 0}},
        {1089, 8, 0, 0, 0, {197, 144, 112, 94, 15, 26, 49, 83}},
        {1104, 8, 0, 0, 0, {18, 205, 41, 148, 247, 36, 205, 126}},
        {1107, 4, 0, 0, 0, {246, 230, 202, 5, 0, 0, 0, 0}},
        {1120, 8, 0, 0, 0, {175, 146, 125, 80, 177, 66, 83, 112}},
        {1122, 8, 0, 0, 0, {74, 25, 1, 186, 119, 16, 212, 168}},
        {1124, 8, 0, 0, 0, {99, 206, 186, 48, 247, 78, 39, 27}},
        {1127, 3, 0, 0, 0, {27, 165, 18, 0, 0, 0, 0, 0}},
        {1136, 8, 0, 0, 0, {111, 23, 140, 30, 169, 9, 111, 90}},
        {1138, 8, 0, 0, 0, {76, 194, 203, 150, 219, 204, 80, 83}},
        {1140, 8, 0, 0, 0, {220, 37, 251, 63, 243, 182, 111, 234}},
        {1143, 5, 0, 0, 0, {4, 150, 6, 32, 59, 0, 0, 0}},
        {1152, 8, 0, 0, 0, {34, 170, 47, 174, 201, 216, 184, 56}},
        {1154, 8, 0, 0, 0, {51, 4, 250, 254, 154, 214, 202, 234}},
        {1157, 7, 0, 0, 0, {41, 166, 15, 36, 229, 2, 218, 0}},
        {1168, 8, 0, 0, 0, {237, 223, 234, 243, 255, 37, 11, 33}},
        {1170, 8, 0, 0, 0, {207, 58, 207, 152, 18, 135, 208, 69}},
        {1172, 8, 0, 0, 0, {139, 203, 67, 37, 161, 13, 16, 202}},
        {1175, 7, 0, 0, 0, {179, 31, 238, 152, 34, 201, 236, 0}},
        {1184, 8, 0, 0, 0, {168, 214, 2, 167, 251, 13, 200, 203}}};
    memcpy(canMsgBuf, temp, sizeof(temp));

    for (int i = 0; i < CAN_NUM_OF_TEST_RUN; i++)
    {
        canMsgBufRdPt = 0;

        gettimeofday(&startTime, NULL);
        while (CAN_transportDataAvailable())
        {
            uint8_t data[32];

            while (CAN_transportReceive((void *)data, 32)) {}
        }
        gettimeofday(&endTime, NULL);

        timeSpentByAllRuns += getMicrosDiff(&startTime, &endTime);
    }

    printf("Microseconds spent average: %d", timeSpentByAllRuns / CAN_NUM_OF_TEST_RUN);


    return 0;
}
